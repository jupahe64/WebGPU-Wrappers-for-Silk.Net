using System;


//generated by the following code:
/*
foreach(string typeName in new string[]{
    "Adapter",
    "BindGroup",
    "BindGroupLayout",
    "Buffer",
    "CommandBuffer",
    "CommandEncoder",
    "ComputePassEncoder",
    "ComputePipeline",
    "Device",
    "Instance",
    "PipelineLayout",
    "QuerySet",
    "Queue",
    "RenderBundle",
    "RenderBundleEncoder",
    "RenderPassEncoder",
    "RenderPipeline",
    "Sampler",
    "ShaderModule",
    "Surface",
    "Texture",
    "TextureView",
}){
    Console.WriteLine($$"""
    public unsafe partial struct {{typeName}}Ptr : IEquatable<{{typeName}}Ptr>
    {
        public override bool Equals(object? obj)
        {
            return obj is {{typeName}}Ptr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==({{typeName}}Ptr x, {{typeName}}Ptr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=({{typeName}}Ptr x, {{typeName}}Ptr y)
        {
            return !(x == y);
        }
        public bool Equals({{typeName}}Ptr other)
        {
            return _ptr == other._ptr;
        }
    }
    """);
    Console.WriteLine();
    Console.WriteLine();
}
*/

namespace Silk.NET.WebGPU.Safe;

public unsafe partial struct AdapterPtr : IEquatable<AdapterPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is AdapterPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(AdapterPtr x, AdapterPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(AdapterPtr x, AdapterPtr y)
    {
        return !(x == y);
    }
    public bool Equals(AdapterPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct BindGroupPtr : IEquatable<BindGroupPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is BindGroupPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(BindGroupPtr x, BindGroupPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(BindGroupPtr x, BindGroupPtr y)
    {
        return !(x == y);
    }
    public bool Equals(BindGroupPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct BindGroupLayoutPtr : IEquatable<BindGroupLayoutPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is BindGroupLayoutPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(BindGroupLayoutPtr x, BindGroupLayoutPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(BindGroupLayoutPtr x, BindGroupLayoutPtr y)
    {
        return !(x == y);
    }
    public bool Equals(BindGroupLayoutPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct BufferPtr : IEquatable<BufferPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is BufferPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(BufferPtr x, BufferPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(BufferPtr x, BufferPtr y)
    {
        return !(x == y);
    }
    public bool Equals(BufferPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct CommandBufferPtr : IEquatable<CommandBufferPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is CommandBufferPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(CommandBufferPtr x, CommandBufferPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(CommandBufferPtr x, CommandBufferPtr y)
    {
        return !(x == y);
    }
    public bool Equals(CommandBufferPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct CommandEncoderPtr : IEquatable<CommandEncoderPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is CommandEncoderPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(CommandEncoderPtr x, CommandEncoderPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(CommandEncoderPtr x, CommandEncoderPtr y)
    {
        return !(x == y);
    }
    public bool Equals(CommandEncoderPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct ComputePassEncoderPtr : IEquatable<ComputePassEncoderPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is ComputePassEncoderPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(ComputePassEncoderPtr x, ComputePassEncoderPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(ComputePassEncoderPtr x, ComputePassEncoderPtr y)
    {
        return !(x == y);
    }
    public bool Equals(ComputePassEncoderPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct ComputePipelinePtr : IEquatable<ComputePipelinePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is ComputePipelinePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(ComputePipelinePtr x, ComputePipelinePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(ComputePipelinePtr x, ComputePipelinePtr y)
    {
        return !(x == y);
    }
    public bool Equals(ComputePipelinePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct DevicePtr : IEquatable<DevicePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is DevicePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(DevicePtr x, DevicePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(DevicePtr x, DevicePtr y)
    {
        return !(x == y);
    }
    public bool Equals(DevicePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct InstancePtr : IEquatable<InstancePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is InstancePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(InstancePtr x, InstancePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(InstancePtr x, InstancePtr y)
    {
        return !(x == y);
    }
    public bool Equals(InstancePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct PipelineLayoutPtr : IEquatable<PipelineLayoutPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is PipelineLayoutPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(PipelineLayoutPtr x, PipelineLayoutPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(PipelineLayoutPtr x, PipelineLayoutPtr y)
    {
        return !(x == y);
    }
    public bool Equals(PipelineLayoutPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct QuerySetPtr : IEquatable<QuerySetPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is QuerySetPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(QuerySetPtr x, QuerySetPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(QuerySetPtr x, QuerySetPtr y)
    {
        return !(x == y);
    }
    public bool Equals(QuerySetPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct QueuePtr : IEquatable<QueuePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is QueuePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(QueuePtr x, QueuePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(QueuePtr x, QueuePtr y)
    {
        return !(x == y);
    }
    public bool Equals(QueuePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct RenderBundlePtr : IEquatable<RenderBundlePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is RenderBundlePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(RenderBundlePtr x, RenderBundlePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(RenderBundlePtr x, RenderBundlePtr y)
    {
        return !(x == y);
    }
    public bool Equals(RenderBundlePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct RenderBundleEncoderPtr : IEquatable<RenderBundleEncoderPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is RenderBundleEncoderPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(RenderBundleEncoderPtr x, RenderBundleEncoderPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(RenderBundleEncoderPtr x, RenderBundleEncoderPtr y)
    {
        return !(x == y);
    }
    public bool Equals(RenderBundleEncoderPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct RenderPassEncoderPtr : IEquatable<RenderPassEncoderPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is RenderPassEncoderPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(RenderPassEncoderPtr x, RenderPassEncoderPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(RenderPassEncoderPtr x, RenderPassEncoderPtr y)
    {
        return !(x == y);
    }
    public bool Equals(RenderPassEncoderPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct RenderPipelinePtr : IEquatable<RenderPipelinePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is RenderPipelinePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(RenderPipelinePtr x, RenderPipelinePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(RenderPipelinePtr x, RenderPipelinePtr y)
    {
        return !(x == y);
    }
    public bool Equals(RenderPipelinePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct SamplerPtr : IEquatable<SamplerPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is SamplerPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(SamplerPtr x, SamplerPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(SamplerPtr x, SamplerPtr y)
    {
        return !(x == y);
    }
    public bool Equals(SamplerPtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct ShaderModulePtr : IEquatable<ShaderModulePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is ShaderModulePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(ShaderModulePtr x, ShaderModulePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(ShaderModulePtr x, ShaderModulePtr y)
    {
        return !(x == y);
    }
    public bool Equals(ShaderModulePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct SurfacePtr : IEquatable<SurfacePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is SurfacePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(SurfacePtr x, SurfacePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(SurfacePtr x, SurfacePtr y)
    {
        return !(x == y);
    }
    public bool Equals(SurfacePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct TexturePtr : IEquatable<TexturePtr>
{
    public override bool Equals(object? obj)
    {
        return obj is TexturePtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(TexturePtr x, TexturePtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(TexturePtr x, TexturePtr y)
    {
        return !(x == y);
    }
    public bool Equals(TexturePtr other)
    {
        return _ptr == other._ptr;
    }
}


public unsafe partial struct TextureViewPtr : IEquatable<TextureViewPtr>
{
    public override bool Equals(object? obj)
    {
        return obj is TextureViewPtr c && this == c;
    }
    public override int GetHashCode()
    {
        return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
    }
    public static bool operator ==(TextureViewPtr x, TextureViewPtr y)
    {
        return x._ptr == y._ptr && x._wgpu == y._wgpu;
    }
    public static bool operator !=(TextureViewPtr x, TextureViewPtr y)
    {
        return !(x == y);
    }
    public bool Equals(TextureViewPtr other)
    {
        return _ptr == other._ptr;
    }
}