using System;
using System.Collections.Generic;
using System.Text;


//generated by the following code:
/*
foreach(string typeName in new string[]{
    "Adapter",
    "BindGroup",
    "BindGroupLayout",
    "Buffer",
    "CommandBuffer",
    "CommandEncoder",
    "ComputePassEncoder",
    "ComputePipeline",
    "Device",
    "Instance",
    "PipelineLayout",
    "QuerySet",
    "Queue",
    "RenderBundle",
    "RenderBundleEncoder",
    "RenderPassEncoder",
    "RenderPipeline",
    "Sampler",
    "ShaderModule",
    "Surface",
    "SwapChain",
    "Texture",
    "TextureView",
}){
    Console.WriteLine($$"""
    public unsafe partial struct {{typeName}}Ptr
    {
        public override bool Equals(object? obj)
        {
            return obj is {{typeName}}Ptr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==({{typeName}}Ptr x, {{typeName}}Ptr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=({{typeName}}Ptr x, {{typeName}}Ptr y)
        {
            return !(x == y);
        }
    }
    """);
    Console.WriteLine();
    Console.WriteLine();
}
*/

namespace Silk.NET.WebGPU.Safe
{
    public unsafe partial struct AdapterPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is AdapterPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(AdapterPtr x, AdapterPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(AdapterPtr x, AdapterPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct BindGroupPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is BindGroupPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(BindGroupPtr x, BindGroupPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(BindGroupPtr x, BindGroupPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct BindGroupLayoutPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is BindGroupLayoutPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(BindGroupLayoutPtr x, BindGroupLayoutPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(BindGroupLayoutPtr x, BindGroupLayoutPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct BufferPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is BufferPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(BufferPtr x, BufferPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(BufferPtr x, BufferPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct CommandBufferPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is CommandBufferPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(CommandBufferPtr x, CommandBufferPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(CommandBufferPtr x, CommandBufferPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct CommandEncoderPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is CommandEncoderPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(CommandEncoderPtr x, CommandEncoderPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(CommandEncoderPtr x, CommandEncoderPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct ComputePassEncoderPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is ComputePassEncoderPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(ComputePassEncoderPtr x, ComputePassEncoderPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(ComputePassEncoderPtr x, ComputePassEncoderPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct ComputePipelinePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is ComputePipelinePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(ComputePipelinePtr x, ComputePipelinePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(ComputePipelinePtr x, ComputePipelinePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct DevicePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is DevicePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(DevicePtr x, DevicePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(DevicePtr x, DevicePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct InstancePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is InstancePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(InstancePtr x, InstancePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(InstancePtr x, InstancePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct PipelineLayoutPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is PipelineLayoutPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(PipelineLayoutPtr x, PipelineLayoutPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(PipelineLayoutPtr x, PipelineLayoutPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct QuerySetPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is QuerySetPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(QuerySetPtr x, QuerySetPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(QuerySetPtr x, QuerySetPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct QueuePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is QueuePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(QueuePtr x, QueuePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(QueuePtr x, QueuePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct RenderBundlePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is RenderBundlePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(RenderBundlePtr x, RenderBundlePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(RenderBundlePtr x, RenderBundlePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct RenderBundleEncoderPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is RenderBundleEncoderPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(RenderBundleEncoderPtr x, RenderBundleEncoderPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(RenderBundleEncoderPtr x, RenderBundleEncoderPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct RenderPassEncoderPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is RenderPassEncoderPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(RenderPassEncoderPtr x, RenderPassEncoderPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(RenderPassEncoderPtr x, RenderPassEncoderPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct RenderPipelinePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is RenderPipelinePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(RenderPipelinePtr x, RenderPipelinePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(RenderPipelinePtr x, RenderPipelinePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct SamplerPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is SamplerPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(SamplerPtr x, SamplerPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(SamplerPtr x, SamplerPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct ShaderModulePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is ShaderModulePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(ShaderModulePtr x, ShaderModulePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(ShaderModulePtr x, ShaderModulePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct SurfacePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is SurfacePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(SurfacePtr x, SurfacePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(SurfacePtr x, SurfacePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct SwapChainPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is SwapChainPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(SwapChainPtr x, SwapChainPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(SwapChainPtr x, SwapChainPtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct TexturePtr
    {
        public override bool Equals(object? obj)
        {
            return obj is TexturePtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(TexturePtr x, TexturePtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(TexturePtr x, TexturePtr y)
        {
            return !(x == y);
        }
    }


    public unsafe partial struct TextureViewPtr
    {
        public override bool Equals(object? obj)
        {
            return obj is TextureViewPtr c && this == c;
        }
        public override int GetHashCode()
        {
            return ((IntPtr)_ptr).GetHashCode() ^ _wgpu.GetHashCode();
        }
        public static bool operator ==(TextureViewPtr x, TextureViewPtr y)
        {
            return x._ptr == y._ptr && x._wgpu == y._wgpu;
        }
        public static bool operator !=(TextureViewPtr x, TextureViewPtr y)
        {
            return !(x == y);
        }
    }



}
